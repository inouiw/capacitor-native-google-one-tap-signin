name: android Tests

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    env:
      API_LEVEL: 35
      EMULATOR: pixel_3
      TARGET: google_apis
      ABI: x86_64
      CHANNEL: 3
      ANDROID_HOME: /opt/android
      ANDROID_AVD_HOME: /home/runner/.android/avd

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    # Installing node packages is needed for capacitor-android dependency. 
    - name: Install Node.js dependencies
      run: npm install

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        distribution: 'adopt'
        java-version: '17'

    - name: Download and setup Android SDK
      uses: android-actions/setup-android@v3
    
    - name: Pre-configure geographic area and city for qemu-kvm
      run: |
        echo 'tzdata tzdata/Areas select Etc' | sudo debconf-set-selections
        echo 'tzdata tzdata/Zones/Etc select UTC' | sudo debconf-set-selections

    - name: Install KVM and dependencies
      run: |
        sudo apt-get update
        DEBIAN_FRONTEND=noninteractive sudo apt-get install -y qemu-kvm libvirt-daemon-system libvirt-clients bridge-utils
        sudo usermod -aG kvm $USER
        sudo chown $USER /dev/kvm

    - name: Install Android SDK and Emulator
      run: |
        set -e
        echo "y" | sdkmanager --channel=$CHANNEL "emulator"
        echo "y" | sdkmanager --channel=$CHANNEL "platform-tools"
        echo "y" | sdkmanager --channel=$CHANNEL "system-images;android-$API_LEVEL;$TARGET;$ABI"

    - name: Create AVD Directory
      run: |
        mkdir -p $ANDROID_AVD_HOME

    - name: Create AVD
      run: |
        set -e
        echo "no" | avdmanager create avd -n test -k "system-images;android-$API_LEVEL;$TARGET;$ABI" --force
        # avdmanager list avd

    - name: Prepare and Start Emulator
      run: |
        set -e
        sudo kvm-ok
        $ANDROID_HOME/emulator/emulator -avd test -no-window -no-snapshot -no-boot-anim -no-audio -gpu swiftshader_indirect -accel on &
        timeout 5m adb wait-for-device
        boot_completed=false; \
        while [ "$boot_completed" != "1" ]; do \
          echo "Waiting for emulator to boot..."; \
          sleep 5; \
          boot_completed=$(adb shell getprop sys.boot_completed 2>/dev/null | tr -d '\r'); \
        done
        adb shell settings put global window_animation_scale 0
        adb shell settings put global transition_animation_scale 0
        adb shell settings put global animator_duration_scale 0
        adb shell input keyevent 82

    - name: Start logcat
      run: |
        # From the android emulator, output all messages with the TestRunner tag and ignore all other messages.
        adb logcat -c  # Clear the logcat buffer
        adb logcat "TestRunner:I *:S" > logcat_output.txt &
        echo $! > logcat_pid.txt

    - name: Make gradlew executable
      run: chmod +x ./android/gradlew

    - name: Run Instrumented Tests
      run: (cd android && ./gradlew --no-daemon build connectedAndroidTest && echo "" && echo "==Logcat Output==" && cat ../logcat_output.txt)

    - name: Stop logcat
      run: |
        kill $(cat logcat_pid.txt)
